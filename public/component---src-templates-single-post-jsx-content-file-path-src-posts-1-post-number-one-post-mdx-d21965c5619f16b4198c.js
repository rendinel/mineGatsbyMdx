"use strict";(self.webpackChunkgatsbydecapblog=self.webpackChunkgatsbydecapblog||[]).push([[110],{9546:function(e,t,n){n.r(t),n.d(t,{Head:function(){return y},default:function(){return p}});var a=n(1151),r=n(7294);function o(e){const t=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,a.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h2,null,"Heading Level One"),"\n",r.createElement(t.p,null,"Gatsby is able to automatically infer a GraphQL Schema from your data, and in many cases, this is really all you need. There are however situations when you either want to explicitly define the data shape, or add custom functionality to the query layer - this is what Gatsby’s Schema Customization API provides."),"\n",r.createElement(t.p,null,"Gatsby is able to automatically infer a GraphQL Schema from your data, and in many cases, this is really all you need. There are however situations when you either want to explicitly define the data shape, or add custom functionality to the query layer - this is what Gatsby’s Schema Customization API provides."),"\n",r.createElement(t.p,null,"Gatsby is able to automatically infer a GraphQL Schema from your data, and in many cases, this is really all you need. There are however situations when you either want to explicitly define the data shape, or add custom functionality to the query layer - this is what Gatsby’s Schema Customization API provides."),"\n",r.createElement(t.h2,null,"Heading Level Two"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-js"},"// comments\nconst name = 'john'\nconst channel = 'coding addict'\n\nfunction featuredProducts(data) {\n  return data.filter((item) => {\n    return item.featured === true\n  })\n}\nfeaturedProducts()\n")),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-jsx"},"import React from 'react'\n\nconst Counter = () => {\n  const [count, setCount] = React.useState(0)\n  return (\n    <section className='counter'>\n      <h4>show some love to MDX</h4>\n      <h4>likes {count}</h4>\n      <button className='btn btn-danger' onClick={() => setCount(count + 1)}>\n        i like mdx\n      </button>\n    </section>\n  )\n}\nexport default Counter\n")),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-html"},'<h1>hello world</h1>\n<p class="random">random text</p>\n<section class="contact">\n  <div class="title">\n    <h1>contact us</h1>\n  </div>\n</section>\n')),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-css"},"max-width: 500px;\nborder-radius: var(--radius);\npadding: 1rem 1.5rem;\nbackground: var(--clr-grey-10);\ntext-align: center;\n")),"\n",r.createElement(t.h2,null,"Heading Level One"),"\n",r.createElement(t.p,null,"Gatsby is able to automatically infer a GraphQL Schema from your data, and in many cases, this is really all you need. There are however situations when you either want to explicitly define the data shape, or add custom functionality to the query layer - this is what Gatsby’s Schema Customization API provides."))}var l=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?r.createElement(t,e,r.createElement(o,e)):o(e)},i=n(7747),c=n(2757),s=n(2675),u=n(999),m=n(4323),h=n(1443);function d(e){let{data:t,children:n}=e;const o=t.mdx,{author:l,category:h,preview:d,date:p,title:y}=o.frontmatter;return r.createElement(r.Fragment,null,r.createElement(i.xu,{px:"1rem",pt:"3rem"},r.createElement(c.X,{fontSize:"2.25rem",fontWeight:"400",color:"#292929",lineHeight:"1.3",as:"h1"},y),r.createElement(s.x,{fontSize:"0.9rem",lineHeight:"1.54rem",color:"#757575"},p," | ",l),r.createElement(s.x,{fontSize:"1.125rem",lineHeight:"1.54rem",color:"#292929",marginTop:"3rem",as:"p"},d),r.createElement(a.Zo,{components:u.w},n),r.createElement(m.Z,{category:h})))}function p(e){return r.createElement(d,e,r.createElement(l,e))}const y=e=>{let{data:t}=e;const n=t.mdx;return r.createElement(h.Z,{pathname:n.frontmatter.slug,description:n.frontmatter.preview,title:n.frontmatter.title,published:n.frontmatter.date})}}}]);
//# sourceMappingURL=component---src-templates-single-post-jsx-content-file-path-src-posts-1-post-number-one-post-mdx-d21965c5619f16b4198c.js.map